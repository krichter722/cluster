#!/usr/bin/perl -w

use warnings;
use Getopt::Long;
use Cwd 'abs_path';
use File::Basename;

print "\nConfiguring Makefiles for your system...\n";

# Set a bunch of variables

my @invoke = @ARGV;

my $ret = 0;

my %options = (
	help => \$help,
	cc => \$cc,
	debug => \$debug,
	cflags => \$cflags,
	extracflags => \$extracflags,
	ldflags => \$ldflags,
	extraldflags => \$extraldflags,
	objdir => \$objdir,
        incdir => \$incdir,
	libdir => \$libdir,
        ccsincdir => \$ccsincdir,
	ccslibdir => \$ccslibdir,
	cmanincdir => \$cmanincdir,
	cmanlibdir => \$cmanlibdir,
	logtincdir => \$logtincdir,
	logtlibdir => \$logtlibdir,
	corosyncincdir => \$corosyncincdir,
	corosynclibdir => \$corosynclibdir,
	openaisincdir => \$openaisincdir,
	openaislibdir => \$openaislibdir,
	corosyncbin => \$corosyncbin,
	zlibincdir => \$zlibincdir,
	zliblibdir => \$zliblibdir,
	ldapincdir => \$ldapincdir,
	ldaplibdir => \$ldaplibdir,
	libexecdir => \$libexecdir,
	mandir  => \$mandir,
	prefix => \$prefix,
	sbindir => \$sbindir,
	initddir => \$initddir,
	sharedir => \$sharedir,
	docdir => \$docdir,
	logdir => \$logdir,
	logrotatedir => \$logrotatedir,
	syslogfacility => \$syslogfacility,
	sysloglevel => \$sysloglevel,
	confdir => \$confdir,
	conffile => \$conffile,
	enable_crack_of_the_day => \$enable_crack_of_the_day,
	enable_legacy_code => \$enable_legacy_code,
	enable_contrib => \$enable_contrib,
	somajor => \$somajor,
	sominor => \$sominor,
	release_version => \$release_version,
	without_common => \$without_common,
	without_config => \$without_config,
	without_cman => \$without_cman,
	without_group => \$without_group,
	without_bindings => \$without_bindings,
);

my $err = &GetOptions (\%options,
		    'help',
		    'cc=s',
		    'debug',
		    'cflags=s',
		    'extracflags=s',
		    'ldflags=s',
		    'extraldflags=s',
		    'objdir=s',
		    'incdir=s',
		    'libdir=s',
		    'ccsincdir=s',
		    'ccslibdir=s',
		    'cmanincdir=s',
		    'cmanlibdir=s',
		    'logtincdir=s',
		    'logtlibdir=s',
		    'corosyncincdir=s',
		    'corosynclibdir=s',
		    'openaisincdir=s',
		    'openaislibdir=s',
		    'corosyncbin=s',
		    'zlibincdir=s',
		    'zliblibdir=s',
		    'ldapincdir=s',
		    'ldaplibdir=s',
		    'libexecdir=s',
		    'mandir=s',
		    'prefix=s',
		    'sbindir=s',
		    'initddir=s',
		    'sharedir=s',
		    'docdir=s',
		    'logdir=s',
		    'logrotatedir=s',
		    'syslogfacility=s',
		    'sysloglevel=s',
		    'confdir=s',
		    'conffile=s',
		    'somajor=s',
		    'sominor=s',
		    'release_version=s',
		    'enable_crack_of_the_day',
		    'enable_legacy_code',
		    'enable_contrib',
		    'without_common',
		    'without_config',
		    'without_cman',
		    'without_group',
		    'without_bindings');

if(!$err) {
  $ret = 1;
  print "*** ERROR: Invalid option detected ***\n";
}

# Check for the --help flag
if ($help || !$err) {
  $_ = $0;
  s/.*\.\/(.*)/$1/;
  print "Usage: $_ [flags]\n";
  print "--help\t\tPrints this usage information\n\n";
  print "install flags:\n";
  print "--prefix=\tthe base directory to install into.  (Default: /usr)\n";
  print "--sbindir=\tthe base directory for system binaries.  (Default: {prefix}/sbin)\n";
  print "--initddir=\tthe base directory for init.d scripts.  (Default: /etc/init.d)\n";
  print "--libdir=\tthe base directory for libraries.  (Default: {prefix}/lib)\n";
  print "--libexecdir=\tthe base directory for executable components.  (Default: {prefix}/libexec)\n";
  print "--sharedir=\tthe base directory for misc cluster files.  (Default: {prefix}/share/cluster)\n";
  print "--docdir=\tthe base directory for misc cluster documentation files.  (Default: {prefix}/share/doc/cluster)\n";
  print "--logdir=\tthe base directory for cluster logging files.  (Default: /var/log/cluster/)\n";
  print "--logrotatedir=\tthe base directory for logrorate.d files.  (Default: /etc/logrotate.d/)\n";
  print "--syslogfacility=\tset the default syslog facility.  (Default: LOG_LOCAL4)\n";
  print "--sysloglevel=\tset the default syslog level.  (Default: LOG_INFO)\n";
  print "--confdir=\tthe cluster config directory.  (Default: /etc/cluster)\n";
  print "--conffile=\tthe cluster config file.  (Default: cluster.conf)\n";
  print "--mandir=\tthe base directory for man pages.  (Default: {prefix}/share/man)\n";
  print "\nbuild flags:\n";
  print "--cc=\t\tcompiler to use.  (Default: gcc)\n";
  print "--debug\t\tEnable debugging build. Changes default CFLAGS to -Wall -O0 -DDEBUG -g.\n";
  print "--cflags=\toverride default CFLAGS settings.  (Default: -Wall -O2 -g)\n";
  print "--extracflags=\tadd extra compiler options to default CFLAGS setting.  (Default: none)\n";
  print "--ldflags=\toverride default LDFLAGS settings.  (Default: none)\n";
  print "--extraldflags=\tadd extra linking options to default LDFLAGS settings.  (Default: none)\n";
  print "--objdir=\tspecify directory where to store object files.  (Defaults: current build dir)\n";
  print "--incdir=\tthe base directory for include files.  (Default: {prefix}/include)\n";
  print "--ccsincdir=\tthe base directory for ccs include files.  (Default: ./config/libs/libccsconfdb)\n";
  print "--ccslibdir=\tthe base directory for ccs libraries.  (Default: ./config/libs/libccsconfdb)\n";
  print "--cmanincdir=\tthe base directory for cman include files.  (Default: ./cman/lib)\n";
  print "--cmanlibdir=\tthe base directory for cman libraries.  (Default: ./cman/lib)\n";
  print "--logtincdir=\tthe base directory for logthread include files.  (Default: ./common/liblogthread)\n";
  print "--logtlibdir=\tthe base directory for logthread libraries.  (Default: ./common/liblogthread)\n";
  print "--corosyncincdir=\tthe base directory for corosync include files.  (Default: {incdir})\n";
  print "--corosynclibdir=\tthe base directory for corosync libraries.  (Default: {libdir}/corosync)\n";
  print "--openaisincdir=\tthe base directory for openais include files.  (Default: {incdir})\n";
  print "--openaislibdir=\tthe base directory for openais libraries.  (Default: {libdir}/openais)\n";
  print "--corosyncbin=\tlocation of corosync executable file.  (Default: /usr/sbin/corosync)\n";
  print "--zlibincdir=\tthe base directory for libz include files.  (Default: {incdir})\n";
  print "--zliblibdir=\tthe base directory for libz libraries.  (Default: {libdir})\n";
  print "--ldapincdir=\tthe base directory for ldap include files.  (Default: {incdir})\n";
  print "--ldaplibdir=\tthe base directory for ldap libraries.  (Default: {libdir})\n";
  print "--enable_crack_of_the_day\tEnable build of highly experimental features that rely on code that is not yet available for general use. (Default: no)\n";
  print "--enable_contrib\tEnable build of community contributed code/tools.  (Default: no)\n";
  print "--enable_legacy_code\tEnable build of old/obsolete/unsupported code/tools.  (Default: no)\n";
  print "--without_common\tDisable common building  (Default: enabled)\n";
  print "--without_config\tDisable config building  (Default: enabled)\n";
  print "--without_cman\tDisable cman building  (Default: enabled)\n";
  print "--without_group\tDisable group building  (Default: enabled)\n";
  print "--without_bindings\tDisable perl/python bindings building  (Default: enabled)\n";
  exit $ret;
}

sub symlinks {
  my $dir = shift;
  my $pattern = shift;
  @args = "find $dir -type f -name $pattern";
  open (IFILE, "@args |");
  while (<IFILE>) {
    chomp;
    s|\./||g;
    s|.*make\/defines.mk||g;
    $dirname = dirname($_);
    $filename = basename($_);
    system("mkdir -p $objdir/$dirname");
    symlink("${cdir}/$_","$objdir/$dirname/$filename");
  }
  close IFILE;
  return 0;
}

$pwd = `pwd`;
chomp($pwd);

if (!$cc) {
  $cc="gcc";
}
if (!$cflags) {
  $cflags="-Wall -Wformat=2 -MMD";
  if (!$debug) {
    $cflags="${cflags} -O2";
  } else {
    $cflags="${cflags} -O0 -DDEBUG";
  }
  $cflags="${cflags} -g";
}
if ($extracflags) {
  $cflags="${cflags} ${extracflags}";
}
if (!$ldflags) {
  $ldflags="";
}
if ($extraldflags) {
  $ldflags="${ldflags} ${extraldflags}";
}
if (!$prefix) {
  $prefix="/usr";
}

print "\nChecking tree: ";
if (!$objdir) {
  $objdir="${pwd}";
}
$objdir = abs_path( $objdir );
$cdir = dirname ( abs_path( $0 ) );
unless ("$cdir" eq "$objdir") {
  chdir "$cdir";
}

if (! -d "$objdir/make") {
  print "setting up $objdir\n";
  mkdir "$objdir";
  symlinks(".","Makefile");
  symlinks(".","*.mk");
  symlinks("bindings","*.bindings");
  symlinks("bindings","*.pl");
  symlinks("bindings","*.xs");
  symlinks("bindings","*.PL");
  symlinks("bindings","MANIFEST");
  symlinks("bindings","typemap");
} else {
  print "nothing to do\n";
}

if (!$incdir) {
  $incdir="${prefix}/include";
}
if (!$libdir) {
  $libdir="${prefix}/lib";
}
if (!$ccsincdir) {
  $ccsincdir="${cdir}/config/libs/libccsconfdb";
}
if (!$ccslibdir) {
  $ccslibdir="${objdir}/config/libs/libccsconfdb";
}
if (!$cmanincdir) {
  $cmanincdir="${cdir}/cman/services/cman/lib";
}
if (!$cmanlibdir) {
  $cmanlibdir="${objdir}/cman/services/cman/lib";
}
if (!$logtincdir) {
  $logtincdir="${cdir}/common/liblogthread";
}
if (!$logtlibdir) {
  $logtlibdir="${objdir}/common/liblogthread";
}
if (!$corosyncincdir) {
  $corosyncincdir="${incdir}";
}
if (!$corosynclibdir) {
  $corosynclibdir="${libdir}/corosync";
}
if (!$openaisincdir) {
  $openaisincdir="${incdir}";
}
if (!$openaislibdir) {
  $openaislibdir="${libdir}/openais";
}
if (!$corosyncbin) {
  $corosyncbin="/usr/sbin/corosync";
}
if (!$zlibincdir) {
  $zlibincdir="${incdir}";
}
if (!$zliblibdir) {
  $zliblibdir="${libdir}";
}
if (!$ldapincdir) {
  $ldapincdir="${incdir}";
}
if (!$ldaplibdir) {
  $ldaplibdir="${libdir}";
}
if (!$libexecdir) {
  $libexecdir="${prefix}/libexec";
}
if (!$mandir) {
  $mandir="${prefix}/share/man";
}
if (!$sbindir) {
  $sbindir="${prefix}/sbin";
}
if (!$initddir) {
  $initddir="/etc/init.d";
}
if (!$sharedir) {
  $sharedir="${prefix}/share/cluster";
}
if (!$docdir) {
  $docdir="${prefix}/share/doc/cluster";
}
if (!$logdir) {
  $logdir="/var/log/cluster";
}
if (!$logrotatedir) {
  $logrotatedir="/etc/logrotate.d";
}
if (!$syslogfacility) {
  $syslogfacility="LOG_LOCAL4";
}
if (!$sysloglevel) {
  $sysloglevel="LOG_INFO";
}
if (!$confdir) {
  $confdir="/etc/cluster";
}
if (!$conffile) {
  $conffile="cluster.conf";
}
if (!$enable_crack_of_the_day) {
  $enable_crack_of_the_day="";
} else {
  print "\n********************************************************************************************\n";
  print "WARNING: *you* have explicitly enabled all possible experimental features under development!\n";
  print "         This code will have no mercy for your data and your machines. You have been warned!\n";
  print "\n********************************************************************************************\n";
  $cflags="${cflags} -DEXPERIMENTAL_BUILD";
}
if (!$enable_contrib) {
  $enable_contrib="";
}
if (!$enable_legacy_code) {
  $enable_legacy_code="";
} else {
  print "\n********************************************************************************************\n";
  print "WARNING: *you* have explicitly enabled the build of old/obsoleted/unsupported code/tools\n";
  print "         This code is provided *only* for backward compatibility\n";
  print "\n********************************************************************************************\n";
  $cflags="${cflags} -DLEGACY_CODE";
}
if (!$without_common) {
  $without_common="";
}
if (!$without_config) {
  $without_config="";
}
if (!$without_cman) {
  $without_cman="";
}
if (!$without_group) {
  $without_group="";
}
if (!$without_bindings) {
  $without_bindings="";
}
if (defined($somajor) && not length $somajor) {
  $somajor="";
}
if (defined($sominor) && not length $sominor) {
  $sominor="";
}
if (defined($release_version) && not length $release_version) {
  $release_version="";
}

open IFILE, "<make/defines.mk.input" or die "Can't redirect stdin";
open OFILE, ">${objdir}/make/defines.mk" or die "Can't redirect stdout";

print OFILE "# This file was generated by configure from defines.mk.input\n";

while (<IFILE>) {
  chomp;
  $_ =~ s/\@SRCDIR\@/$cdir/;
  $_ =~ s/\@CC\@/$cc/;
  $_ =~ s/\@CFLAGS\@/$cflags/;
  $_ =~ s/\@LDFLAGS\@/$ldflags/;
  $_ =~ s/\@OBJDIR\@/$objdir/;
  $_ =~ s/\@INCDIR\@/$incdir/;
  $_ =~ s/\@LIBDIR\@/$libdir/;
  $_ =~ s/\@CCSINCDIR\@/$ccsincdir/;
  $_ =~ s/\@CCSLIBDIR\@/$ccslibdir/;
  $_ =~ s/\@CMANINCDIR\@/$cmanincdir/;
  $_ =~ s/\@CMANLIBDIR\@/$cmanlibdir/;
  $_ =~ s/\@LOGTINCDIR\@/$logtincdir/;
  $_ =~ s/\@LOGTLIBDIR\@/$logtlibdir/;
  $_ =~ s/\@COROSYNCINCDIR\@/$corosyncincdir/;
  $_ =~ s/\@COROSYNCLIBDIR\@/$corosynclibdir/;
  $_ =~ s/\@OPENAISINCDIR\@/$openaisincdir/;
  $_ =~ s/\@OPENAISLIBDIR\@/$openaislibdir/;
  $_ =~ s/\@COROSYNCBIN\@/$corosyncbin/;
  $_ =~ s/\@LDAPINCDIR\@/$ldapincdir/;
  $_ =~ s/\@LDAPLIBDIR\@/$ldaplibdir/;
  $_ =~ s/\@ZLIBINCDIR\@/$zlibincdir/;
  $_ =~ s/\@ZLIBLIBDIR\@/$zliblibdir/;
  $_ =~ s/\@LIBEXECDIR\@/$libexecdir/;
  $_ =~ s/\@MANDIR\@/$mandir/;
  $_ =~ s/\@SBINDIR\@/$sbindir/;
  $_ =~ s/\@INITDDIR\@/$initddir/;
  $_ =~ s/\@SHAREDIR\@/$sharedir/;
  $_ =~ s/\@DOCDIR\@/$docdir/;
  $_ =~ s/\@LOGDIR\@/$logdir/;
  $_ =~ s/\@LOGROTATEDIR\@/$logrotatedir/;
  $_ =~ s/\@SYSLOGFACILITY\@/$syslogfacility/;
  $_ =~ s/\@SYSLOGLEVEL\@/$sysloglevel/;
  $_ =~ s/\@CONFDIR\@/$confdir/;
  $_ =~ s/\@CONFFILE\@/$conffile/;
  $_ =~ s/\@ENABLE_CRACK_OF_THE_DAY\@/$enable_crack_of_the_day/;
  $_ =~ s/\@ENABLE_LEGACY_CODE\@/$enable_legacy_code/;
  $_ =~ s/\@ENABLE_CONTRIB\@/$enable_contrib/;
  $_ =~ s/\@DISABLE_COMMON\@/$without_common/;
  $_ =~ s/\@DISABLE_CONFIG\@/$without_config/;
  $_ =~ s/\@DISABLE_CMAN\@/$without_cman/;
  $_ =~ s/\@DISABLE_GROUP\@/$without_group/;
  $_ =~ s/\@DISABLE_BINDINGS\@/$without_bindings/;

  print OFILE "$_\n";
}

close IFILE;

if ((not defined($somajor)) || (not defined($sominor)) || (not defined($release_version))) {

  my $current_soname;
  my $current_version;
  if ( -f 'make/official_release_version' ) {
    open OFFICIAL_VERSION, '<', "make/official_release_version";
    while (<OFFICIAL_VERSION>) {
      if ($_ =~ /SONAME/) {
        $current_soname = $_;
      }
      if ($_ =~ /VERSION/) {
	$current_version = $_;
      }
    }
    close OFFICIAL_VERSION;
  }

  if ((not defined($somajor)) || (not defined($sominor))) {
    if (not defined($current_soname)) {
      print "ERROR: SONAME not defined in make/official_release_version\n";
      exit 1;
    } else {
      $current_soname =~ s/.*"(.*)"\n/$1/;
      my @release_soname = split /\./, $current_soname;
      $somajor = $release_soname[0];
      $sominor = $release_soname[1];
    }
  }

  if (not defined($release_version)) {
    if (not defined($current_version)) {
      $release_version = `date +%s`;
      chomp $release_version;
    } else {
      $release_version = $current_version;
      $release_version =~ s/.*"(.*)"\n/$1/;
    }
  }
}

print OFILE "ifndef SOMAJOR\n";
print OFILE "SOMAJOR = $somajor\n";
print OFILE "endif\n";
print OFILE "ifndef SOMINOR\n";
print OFILE "SOMINOR = $sominor\n";
print OFILE "endif\n";
print OFILE "RELEASE_VERSION = $release_version\n";
print OFILE "CFLAGS += -DRELEASE_VERSION=\\\"$release_version\\\"\n";

close OFILE;

open OFILE, ">${objdir}/.configure.sh.tmp" or die "Can't redirect stdout";
print OFILE "#!/bin/bash\n";
print OFILE "$0 @invoke \$@\n";
print OFILE "exit \$?\n";
close OFILE;

system("mv ${objdir}/.configure.sh.tmp ${objdir}/.configure.sh");

print "Completed Makefile configuration\n\n";
